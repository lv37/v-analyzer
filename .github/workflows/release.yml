name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - '*'
    paths-ignore:
      - '**/test/**'
      - '**/tests/**'
      - '**/test_*.v'
      - '**/*_test.v'
      - '**/*.md'
      - '.github/**'
      - '!**/release.yml'

permissions:
  contents: write

env:
  PROJECT_NAME: v-analyzer

jobs:
  build-v-analyzer:
    permissions: write-all
    strategy:
      matrix:
        target: [linux-x86_64, darwin-x86_64, darwin-arm64, windows-x86_64]
        build_type: [release]
        include:
          - target: windows-x86_64
            os: windows-latest
            bin_ext: .exe
          - target: linux-x86_64
            os: ubuntu-latest
          - target: darwin-x86_64
            os: macos-latest
            vflags: -d cross_compile_macos_x86_64
          - target: darwin-arm64
            os: macos-latest
            vflags: -d cross_compile_macos_arm64
          - build_type: release
            cflags: -fno-exceptions -fno-unwind-tables -fno-asynchronous-unwind-tables -frename-registers -ftree-vectorize
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
      - name: Install V
        uses: vlang/setup-v@v1.4
        with:
          check-latest: true

      - name: Checkout v-analyzer
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Compile ${{ matrix.build_type }} build
        id: compile
        env:
          CFLAGS: ${{ matrix.cflags }} -pipe
          VFLAGS: ${{ matrix.vflags }}
        shell: bash
        run: |
          v up
          v run build.vsh ${{ matrix.build_type }}
          if [[ "${{ matrix.os }}" != "macos-latest" ]]; then
            strip --strip-unneeded ./bin/v-analyzer${{ matrix.bin_ext }}
            strip --discard-all ./bin/v-analyzer${{ matrix.bin_ext }}
          fi
          if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
            chmod +x ./bin/v-analyzer${{ matrix.bin_ext }}
          fi
          mv ./bin/v-analyzer${{ matrix.bin_ext }} ./bin/v-analyzer-${{ matrix.target }}${{ matrix.bin_ext }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        env:
          ARTIFACT_NAME: ${{ env.PROJECT_NAME }}-${{ matrix.target }}${{ steps.compile.outputs.SUFFIX }}
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./bin/v-analyzer-${{ matrix.target }}${{ matrix.bin_ext }}

  release:
    runs-on: ubuntu-latest
    needs: build-v-analyzer

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.PROJECT_NAME }}
          merge-multiple: true

      - name: Update nightly tag
        if: github.ref_type != 'tag'
        uses: richardsimko/update-tag@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly

      - name: Generate development release body
        if: github.ref_type != 'tag'
        id: generate_body
        shell: bash
        run: |
          now=$(date -u +'%Y-%m-%d %H:%M:%S UTC')
          echo "BODY=Generated on <samp>$now</samp> from commit ${{ github.sha }}." >> "$GITHUB_OUTPUT"

      - name: Release development version
        if: github.ref_type != 'tag'
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ env.PROJECT_NAME }}/*
          tag: nightly
          body: ${{ steps.generate_body.outputs.BODY }}
          name: v-analyzer development build
          allowUpdates: true
          prerelease: true

      - name: Release latest version
        if: github.ref_type == 'tag'
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ env.PROJECT_NAME }}/*
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
